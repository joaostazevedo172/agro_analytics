import cx_Oracle
import sys
from datetime import datetime, timedelta
import os 
import shutil 
import time 
import requests 
import json # NOVO: Importa o m√≥dulo JSON

# ====================================================================
# CONFIGURA√á√ÉO DE AMBIENTE E CREDENCIAIS
# ====================================================================

# O CAMINHO DEVE SER O LOCAL EXATO DA OCI.DLL!
INSTANT_CLIENT_DIR = r"C:\oracle\instantclient_21_9\instantclient-basic-windows.x64-23.9.0.25.07\instantclient_23_9" 

try:
    # Este m√©todo FOR√áA o Python a encontrar o cliente Oracle
    cx_Oracle.init_oracle_client(lib_dir=INSTANT_CLIENT_DIR)
except Exception as e:
    # print(f"Aviso: Falha ao inicializar o cliente Oracle. Usando a configura√ß√£o de ambiente. {e}")
    pass

# CONFIGURA√á√ïES GERAIS E CREDENCIAIS
LIMITE_ALERTA_RISCO = 10.0  # Fixo para Cana-de-A√ß√∫car
CULTURA_ATUAL = "CANA-DE-A√á√öCAR" # Fixo
ARQUIVO_TEXTO_PADRAO = "registros_colheita.txt" # NOVO: Nome do arquivo de texto
ARQUIVO_JSON_PADRAO = "registros_colheita.json" # NOVO: Nome do arquivo JSON

# Dados de conex√£o com o Oracle (SEUS DADOS INSERIDOS AQUI)
ORACLE_USER = "rm566701"
ORACLE_PASSWORD = "fiap25"
ORACLE_HOST = "oracle.fiap.com.br"
ORACLE_PORT = 1521
ORACLE_SID = "ORCL"
TABELA_COLHEITAS = "COLHEITAS"  # Tabela de registros de colheita
TABELA_PLANEJAMENTO = "PLANEJAMENTO" # NOVA Tabela de planejamento

# Mapeamento para simular viabilidade e REGIONALIZA√á√ÉO DE PLANTIO
MAPA_VIABILIDADE_CANASIMULADO = {
    'SP': ('CENTRO-SUL', True), 'GO': ('CENTRO-SUL', True), 'MG': ('CENTRO-SUL', True), 'MS': ('CENTRO-SUL', True), 
    'PR': ('CENTRO-SUL', True), 'MT': ('CENTRO-SUL', True), 
    'AL': ('NORDESTE', True), 'PE': ('NORDESTE', True), 'PB': ('NORDESTE', True), 'BA': ('NORDESTE', True),
    'RJ': ('OUTRAS', True), 'ES': ('OUTRAS', True), 'DF': ('OUTRAS', True),
    'CE': ('OUTRAS', False), 'MA': ('OUTRAS', False), 'PI': ('OUTRAS', False), 'PA': ('OUTRAS', False), 'AM': ('OUTRAS', False), 'RR': ('OUTRAS', False), 'AP': ('OUTRAS', False), 'RO': ('OUTRAS', False), 'AC': ('OUTRAS', False), 
    'DF': ('OUTRAS', True), 'SC': ('OUTRAS', False), 'RS': ('OUTRAS', False)
}

# ====================================================================
# FUN√á√ïES DE VALIDA√á√ÉO (Consist√™ncia de Dados)
# ====================================================================

def validar_float(mensagem):
    """ Fun√ß√£o que for√ßa o usu√°rio a digitar um float v√°lido e non-negativo. """
    while True:
        try:
            valor = input(mensagem)
            valor_float = float(valor.replace(',', '.'))
            if valor_float < 0:
                print("‚ö†Ô∏è O valor deve ser non-negativo.")
                continue
            return valor_float
        except ValueError:
            print("‚ùå ERRO: Por favor, digite um n√∫mero v√°lido (ex: 95.5 ou 100).")

def validar_data(mensagem, formato='%Y-%m-%d', tentativas=3):
    """ Fun√ß√£o que for√ßa o usu√°rio a digitar uma data no formato AAAA-MM-DD. """
    tentativas_restantes = tentativas
    while tentativas_restantes > 0:
        data_str = input(mensagem)
        try:
            datetime.strptime(data_str, formato)
            return data_str
        except ValueError:
            tentativas_restantes -= 1
            print(f"‚ùå ERRO: Formato de data inv√°lido. Voc√™ tem {tentativas_restantes} tentativas restantes.")
            if tentativas_restantes == 0:
                sys.exit()

# ====================================================================
# FUN√á√ïES DE L√ìGICA AGRON√îMICA E ESTIMATIVA
# ====================================================================

def simular_api_localidade(estado):
    """ Simula a consulta de viabilidade de √°rea de plantio de cana por Estado (UF). """
    estado = estado.strip().upper()
    regiao, viabilidade = MAPA_VIABILIDADE_CANASIMULADO.get(estado, ('OUTRAS', False))
    if viabilidade:
        motivo = "Solo argiloso, temperatura ideal."
    else:
        motivo = "Condi√ß√µes desfavor√°veis."
    return regiao, viabilidade, motivo

def avaliar_epoca_plantio(mes_plantio, regiao):
    """ Avalia a melhor √©poca de plantio com base na regi√£o. """
    mes_plantio = int(mes_plantio)
    if regiao == 'CENTRO-SUL':
        if 10 <= mes_plantio <= 12 or 1 <= mes_plantio <= 4:
            return True, "√âpoca ideal (Plantio de Ano e Meio/Meia-Safra)."
        else:
            return False, "Risco de seca/geada (Plantio fora da janela de chuva)."
    
    elif regiao == 'NORDESTE':
        if 3 <= mes_plantio <= 5:
            return True, "√âpoca ideal (In√≠cio das chuvas na regi√£o)."
        else:
            return False, "Risco de estresse h√≠drico (seca)."

    else:
        return True, "√âpoca considerada neutra/ideal para esta regi√£o."

def simular_controle_pragas(mes_plantio):
    """ Simula a an√°lise de risco de pragas (Ex: Broca da Cana), dando um motivo. """
    mes = int(mes_plantio)
    
    if mes in [12, 1, 2, 3]:
        risco = "Alto"
        motivo = "Ver√£o/Umidade alta, favorecendo a atividade da Broca da Cana."
    elif mes in [9, 10, 11]:
        risco = "Moderado"
        motivo = "Aumento do risco devido √† primavera e retomada do crescimento."
    else:
        risco = "Baixo"
        motivo = "Risco reduzido devido √†s baixas temperaturas (Inverno)."
        
    return risco, motivo

def planejar_colheita_escalonada():
    """ Gera uma sugest√£o de planejamento de colheita. """
    hoje = datetime.now()
    inicio_colheita = hoje.replace(month=4, day=1) 
    
    fase1_eng = inicio_colheita.strftime("%b/%Y")
    fase2_eng = (inicio_colheita + timedelta(days=60)).strftime("%b/%Y")
    fase3_eng = (inicio_colheita + timedelta(days=120)).strftime("%b/%Y")
    
    # Tradu√ß√£o para Portugu√™s
    def formatar_mes_pt(data_str):
        mes_map = {'Jan': 'Jan', 'Feb': 'Fev', 'Mar': 'Mar', 'Apr': 'Abr', 'May': 'Mai', 'Jun': 'Jun',
                   'Jul': 'Jul', 'Aug': 'Ago', 'Sep': 'Set', 'Oct': 'Out', 'Nov': 'Nov', 'Dec': 'Dez'}
        mes_eng = data_str.split('/')[0]
        mes_pt = mes_map.get(mes_eng, mes_eng)
        return data_str.replace(mes_eng, mes_pt)
    
    fase1_pt = formatar_mes_pt(fase1_eng)
    fase2_pt = formatar_mes_pt(fase2_eng)
    fase3_pt = formatar_mes_pt(fase3_eng)
    
    return f"Fase 1: {fase1_pt}; Fase 2: {fase2_pt}; Fase 3: {fase3_pt}"

def estimar_perda_planejada(estado_uf, mes_plantio):
    """
    Estima um valor de perda (em t/ha) baseado nas condi√ß√µes de plantio (modelo agron√¥mico).
    """
    perda_base = 5.0 # Perda base m√≠nima e ideal
    motivos = ["Condi√ß√µes ideais de plantio."]
    
    regiao, viabilidade_ok, _ = simular_api_localidade(estado_uf)

    epoca_ok, motivo_epoca = avaliar_epoca_plantio(mes_plantio, regiao)
    if not epoca_ok:
        perda_base += 3.0
        motivos.append(f"√âpoca de plantio sub-√≥tima: {motivo_epoca}")
        
    if not viabilidade_ok:
        perda_base += 4.0
        motivos.append("Viabilidade da √°rea baixa.")
        
    risco_praga, motivo_praga = simular_controle_pragas(mes_plantio)
    if 'Alto' in risco_praga:
        perda_base += 2.0 
        motivos.append(f"Risco de pragas alto: {motivo_praga}")

    if len(motivos) > 1 and "Condi√ß√µes ideais de plantio." in motivos:
        motivos.remove("Condi√ß√µes ideais de plantio.")
        
    motivo_final = " | ".join(motivos)
    if not motivo_final:
        motivo_final = "Condi√ß√µes ideais de plantio."
        
    perda_estimada = round(max(5.0, perda_base), 2)
    return perda_estimada, motivo_final


# ====================================================================
# FUN√á√ïES DE CADASTRO E ESTRUTURA DE DADOS (AGORA AUTOMATIZADA)
# ====================================================================

def cadastrar_nova_colheita(registros):
    """ 
    Cria um novo dicion√°rio de colheita. Integra o planejamento agron√¥mico
    para realizar a previs√£o de perda e valoriza√ß√£o.
    """
    # NOVO: Acha o pr√≥ximo ID corretamente, considerando IDs de arquivos tamb√©m
    max_id = 0
    if registros:
        # Garante que o ID √© um n√∫mero e pega o m√°ximo
        max_id = max(reg.get('id', 0) for reg in registros if isinstance(reg.get('id'), (int, float))) 
    novo_id = int(max_id) + 1
    
    PRECO_TONELADA_SIMULADO = 130.00 # Valor simulado para c√°lculo financeiro
    
    print("\n--- 1. COLETA DE DADOS GERAIS E PLANEJAMENTO ---")
    
    # 1. LOCALIDADE E √âPOCA (Inputs para a Estimativa)
    estado_uf = input("1. [PLANEJAMENTO] Informe a UF da colheita (Ex: SP): ").strip().upper()
    while True:
        try:
            mes = int(input("2. [PLANEJAMENTO] Informe o M√äS de plantio (1-12): "))
            if 1 <= mes <= 12: break
            else: print("M√™s inv√°lido.")
        except ValueError:
            print("Digite apenas o n√∫mero do m√™s.")
    
    # 2. Executa as an√°lises de viabilidade e risco e exibe o relat√≥rio
    regiao, viabilidade, motivo_viabilidade = simular_api_localidade(estado_uf)
    epoca_ideal, motivo_epoca = avaliar_epoca_plantio(mes, regiao)
    risco_praga, recomendacao_praga = simular_controle_pragas(mes)
    sugestao_colheita = planejar_colheita_escalonada()

    # 3. Exibe o Planejamento Detalhado (Usabilidade)
    print("\n" + "="*55)
    print(f"      RELAT√ìRIO DE VIABILIDADE E PLANEJAMENTO DE {estado_uf}      ")
    print("="*55)
    print(f"‚û°Ô∏è REGI√ÉO: {regiao}")
    print(f"‚û°Ô∏è VIABILIDADE DA √ÅREA: {'‚úÖ BOA' if viabilidade else '‚ùå BAIXA'}. Motivo: {motivo_viabilidade}")
    print(f"‚û°Ô∏è √âPOCA DE PLANTIO: {'‚úÖ IDEAL' if epoca_ideal else 'üü† RISCO'}. Motivo: {motivo_epoca}")
    print(f"‚û°Ô∏è RISCO DE PRAGAS: {risco_praga}. Recomenda√ß√£o: {recomendacao_praga}")
    print("="*55)
    
    # 4. Obt√©m a PERDA ESTIMADA e automatiza o PRE√áO
    perda_estimada_tha, motivo_perda_estimada = estimar_perda_planejada(estado_uf, mes)
    
    print("\n--- 2. REGISTRO DE DADOS AUTOM√ÅTICOS ---")
    
    # CAMPOS GERAIS
    talhao = input("3. Identifica√ß√£o do Talh√£o (Ex: T009): ").strip().upper()
    maquina_id = input("4. ID da M√°quina/Colhedora: ").strip().upper()
    
    # PRODUTIVIDADE ESPERADA (√öLTIMO INPUT NECESS√ÅRIO)
    produtividade_esp = validar_float("5. Produtividade ESPERADA (t/ha): ")
    
    # A DATA DE COLHEITA √â A ULTIMA DATA REGISTRADA NO SISTEMA
    data_colheita = datetime.now().strftime("%Y-%m-%d")

    # EXIBI√á√ÉO FINAL DA AUTOMATIZA√á√ÉO
    print(f"\n[INFO] Perda Registrada (t/ha) ser√°: {perda_estimada_tha:.2f} (Estimativa do Sistema)")
    print(f"[INFO] Pre√ßo da Tonelada (R$/t) ser√°: R$ {PRECO_TONELADA_SIMULADO:.2f} (Valor Simulado)")

    # CRIA√á√ÉO DO DICION√ÅRIO (CAMPOS DE PERDA E PRE√áO S√ÉO AUTOM√ÅTICOS)
    novo_registro = {
        "id": novo_id,
        "talhao": talhao,
        "maquina_id": maquina_id,
        "produtividade_esperada_tha": produtividade_esp,
        "perda_registrada_tha": perda_estimada_tha, # DADO ESTIMADO
        "data_colheita": data_colheita,
        "preco_tonelada": PRECO_TONELADA_SIMULADO, # DADO AUTOM√ÅTICO
        "motivo_perda_estimada": motivo_perda_estimada, # NOVO CAMPO DE MOTIVO
    }
    
    registros.append(novo_registro)
    print(f"\n‚úÖ Registro de Colheita {novo_id} cadastrado com sucesso (em mem√≥ria).")


# ====================================================================
# NOVAS FUN√á√ïES DE PERSIST√äNCIA EM ARQUIVO (TEXTO E JSON)
# ====================================================================

def salvar_em_arquivo_texto(dados, nome_arquivo=ARQUIVO_TEXTO_PADRAO):
    """ Salva a lista de dicion√°rios em um arquivo de texto formatado (CSV simples). """
    try:
        if not dados:
            print("‚ö†Ô∏è Nenhum dado para salvar.")
            return

        # Pega as chaves de um registro para usar como cabe√ßalho
        chaves = list(dados[0].keys())
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            # Escreve o cabe√ßalho (separado por |)
            f.write("|".join(chaves) + "\n")
            
            # Escreve cada registro
            for reg in dados:
                valores = [str(reg.get(chave, '')) for chave in chaves]
                f.write("|".join(valores) + "\n")
                
        print(f"\n‚úÖ Dados salvos com sucesso em arquivo de texto: {nome_arquivo}")
    except Exception as e:
        print(f"‚ùå ERRO ao salvar em arquivo de texto: {e}")

def carregar_de_arquivo_texto(nome_arquivo=ARQUIVO_TEXTO_PADRAO):
    """ Carrega a lista de dicion√°rios de um arquivo de texto formatado (CSV simples). """
    registros = []
    try:
        if not os.path.exists(nome_arquivo):
            print(f"‚ö†Ô∏è Arquivo de texto n√£o encontrado: {nome_arquivo}. Iniciando com lista vazia.")
            return []
            
        with open(nome_arquivo, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
            if not linhas:
                print(f"‚ö†Ô∏è Arquivo {nome_arquivo} est√° vazio.")
                return []
                
            # A primeira linha √© o cabe√ßalho
            chaves = linhas[0].strip().split("|")
            
            # Processa as demais linhas
            for linha in linhas[1:]:
                valores = linha.strip().split("|")
                if len(valores) != len(chaves):
                    print(f"‚ö†Ô∏è Aviso: Linha ignorada por formato inv√°lido: {linha.strip()}")
                    continue
                    
                registro = {}
                for i, chave in enumerate(chaves):
                    valor_str = valores[i]
                    # Tenta converter para o tipo correto (int/float)
                    try:
                        if chave in ['id']:
                            registro[chave] = int(valor_str)
                        elif chave in ['produtividade_esperada_tha', 'perda_registrada_tha', 'preco_tonelada']:
                            registro[chave] = float(valor_str)
                        else:
                            registro[chave] = valor_str
                    except ValueError:
                        registro[chave] = valor_str # Mant√©m como string se a convers√£o falhar
                        
                registros.append(registro)

        print(f"\n‚úÖ Dados carregados com sucesso do arquivo de texto: {nome_arquivo}. Total de {len(registros)} registros.")
        return registros
        
    except Exception as e:
        print(f"‚ùå ERRO ao carregar de arquivo de texto: {e}")
        return []

def salvar_em_json(dados, nome_arquivo=ARQUIVO_JSON_PADRAO):
    """ Salva a lista de dicion√°rios em um arquivo JSON. """
    try:
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            json.dump(dados, f, indent=4, ensure_ascii=False)
        print(f"\n‚úÖ Dados salvos com sucesso em arquivo JSON: {nome_arquivo}")
    except Exception as e:
        print(f"‚ùå ERRO ao salvar em JSON: {e}")

def carregar_de_json(nome_arquivo=ARQUIVO_JSON_PADRAO):
    """ Carrega a lista de dicion√°rios de um arquivo JSON. """
    try:
        if not os.path.exists(nome_arquivo):
            print(f"‚ö†Ô∏è Arquivo JSON n√£o encontrado: {nome_arquivo}. Iniciando com lista vazia.")
            return []
            
        with open(nome_arquivo, 'r', encoding='utf-8') as f:
            registros = json.load(f)
            
        print(f"\n‚úÖ Dados carregados com sucesso do arquivo JSON: {nome_arquivo}. Total de {len(registros)} registros.")
        return registros
        
    except json.JSONDecodeError:
        print(f"‚ùå ERRO de decodifica√ß√£o JSON: O arquivo {nome_arquivo} est√° corrompido ou mal formatado.")
        return []
    except Exception as e:
        print(f"‚ùå ERRO ao carregar de JSON: {e}")
        return []

# ====================================================================
# FUN√á√ïES DE C√ÅLCULO E AN√ÅLISE (SUBALGORITMOS)
# ====================================================================

def calcular_perda_percentual(perda_tha, produtividade_esperada_tha):
    """ Fun√ß√£o para calcular a perda em percentual. """
    # TRATAMENTO DE ERRO: Garante que se o prod_esp for 0, o c√°lculo √© 0 para evitar a divis√£o por zero.
    if produtividade_esperada_tha > 0:
        return (perda_tha / produtividade_esperada_tha) * 100
    return 0.0

def calcular_perda_media_por_maquina(registros):
    """ Calcula a perda m√©dia percentual por m√°quina, usando Dicion√°rios para agrega√ß√£o. """
    perdas_por_maquina = {}
    
    for reg in registros:
        # Garante que os valores s√£o num√©ricos, tratando a possibilidade de 'None' ou strings vazias ap√≥s o carregamento
        try:
            perda_tha = float(reg.get('perda_registrada_tha') or 0)
            prod_esp = float(reg.get('produtividade_esperada_tha') or 1)
            maquina = reg['maquina_id']
        except (ValueError, TypeError, KeyError):
            continue # Ignora registros mal formatados

        perda_perc = calcular_perda_percentual(perda_tha, prod_esp)
        
        if maquina not in perdas_por_maquina:
            perdas_por_maquina[maquina] = {'total_perda': 0.0, 'contagem': 0}
            
        perdas_por_maquina[maquina]['total_perda'] += perda_perc
        perdas_por_maquina[maquina]['contagem'] += 1
        
    medias_finais = {}
    for maquina, dados in perdas_por_maquina.items():
        media = dados['total_perda'] / dados['contagem']
        medias_finais[maquina] = media
        
    return medias_finais

def exibir_relatorio_analitico(registros):
    """ Apresenta um relat√≥rio detalhado e um resumo anal√≠tico formatado. """
    if not registros:
        print("\nüö´ Nenhum registro de colheita para analisar.")
        return

    largura_total = 95 # Reduzido para remover a coluna de preju√≠zo
    print("\n" + "="*largura_total) 
    print(f"         AGRO_ANALYTICS: RELAT√ìRIO DE PERDAS DE {CULTURA_ATUAL.upper()}             ")
    print(f"OBJETIVO: Identificar opera√ß√µes com perdas acima do limite cr√≠tico ({LIMITE_ALERTA_RISCO:.1f}%).")
    print("="*largura_total)
    
    # RELAT√ìRIO DETALHADO (Usabilidade) - Removendo a coluna de preju√≠zo
    print(f"{'ID':<4} | {'TALH√ÉO':<6} | {'M√ÅQUINA':<18} | {'PERDA %':<8} | {'STATUS':<15} | {'MOTIVO DA PERDA ESTIMADA':<40}")
    print("-" * largura_total)

    for reg in registros:
        # Puxando valores de forma segura (CORRE√á√ÉO DE LEITURA)
        try:
            perda_tha = float(reg.get('perda_registrada_tha', 0) or 0)
            preco_t = float(reg.get('preco_tonelada', 0) or 0) 
            prod_esp = float(reg.get('produtividade_esperada_tha', 1) or 1) 
        except (ValueError, TypeError):
            continue # Pula registros com valores num√©ricos inv√°lidos

        # C√ÅLCULOS
        perda_perc = calcular_perda_percentual(perda_tha, prod_esp)
        
        if perda_perc > LIMITE_ALERTA_RISCO:
            status = "üö® ALTO RISCO" 
        elif perda_perc > (LIMITE_ALERTA_RISCO / 2):
            status = "üü† ATEN√á√ÉO"
        else:
            status = "‚úÖ OK"
            
        motivo = reg.get('motivo_perda_estimada', 'N√£o registrado').ljust(40) 
            
        print(f"{reg['id']:<4} | {reg['talhao']:<6} | {reg['maquina_id']:<18} | {perda_perc:<8.2f} | {status:<15} | {motivo}")

    print("="*95)

    # RELAT√ìRIO SUM√ÅRIO POR M√ÅQUINA
    print("\n--- AN√ÅLISE SUM√ÅRIA: PERDA M√âDIA POR M√ÅQUINA ---")
    medias = calcular_perda_media_por_maquina(registros)
    
    if medias:
        for maquina, media in medias.items():
            alerta = "(ALERTA)" if media > LIMITE_ALERTA_RISCO else ""
            print(f"M√°quina {maquina}: {media:.2f}% de perda m√©dia {alerta}")
    else:
        print("Nenhuma m√°quina registrada para an√°lise.")
    print("-" * 50)


# ====================================================================
# FUN√á√ïES DE CONEX√ÉO E PERSIST√äNCIA (ORACLE)
# ====================================================================

def conectar_oracle():
    """ 
    Estabelece uma conex√£o com o banco de dados Oracle.
    Ajuste de Rede: Usa TNS String completa para estabilidade.
    """
    try:
        tns_string = (
            f"(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST={ORACLE_HOST})(PORT={ORACLE_PORT})))"
            f"(CONNECT_DATA=(SERVICE_NAME={ORACLE_SID})(SERVER=DEDICATED))"
            f"(ENABLE=BROKEN)(EXPIRE_TIME=10))" 
        )
        
        connection = cx_Oracle.connect(
            user=ORACLE_USER, 
            password=ORACLE_PASSWORD, 
            dsn=tns_string 
        )
        print("Conex√£o com Oracle estabelecida com sucesso!")
        return connection
    except cx_Oracle.Error as e:
        print(f"\n[ERRO CR√çTICO] Falha ao conectar com o banco de dados Oracle. Verifique as credenciais e o status do servidor.")
        print(f"Detalhes do Erro: {e}")
        sys.exit(1)

def carregar_dados_oracle(connection):
    """ Carrega os registros de colheita do banco de dados Oracle. """
    cursor = connection.cursor()
    try:
        query = f"SELECT id, talhao, maquina_id, produtividade_esperada_tha, perda_registrada_tha, data_colheita, preco_tonelada FROM {TABELA_COLHEITAS}"
        cursor.execute(query)
        registros = cursor.fetchall()
        print(f"Dados carregados com sucesso. Total de {len(registros)} registros do Oracle.")
        
        registros_dict = []
        for reg in registros:
            registros_dict.append({
                'id': reg[0],
                'talhao': reg[1],
                'maquina_id': reg[2],
                'produtividade_esperada_tha': float(reg[3] or 1), 
                'perda_registrada_tha': float(reg[4] or 0),
                'data_colheita': str(reg[5]).split()[0], # Garante apenas a data
                'preco_tonelada': float(reg[6] or 0),
                'motivo_perda_estimada': 'N√£o aplic√°vel (DB)'
            })
        return registros_dict

    except cx_Oracle.Error as e:
        print(f"[ERRO] Falha ao carregar os dados do banco de dados: {e}")
        return []
    finally:
        # CORRE√á√ÉO DPI-1010: Verifica se o cursor existe antes de fechar
        if 'cursor' in locals() and cursor:
            try:
                cursor.close()
            except cx_Oracle.Error:
                pass # Ignora o erro se a conex√£o j√° estiver fechada/inv√°lida

def salvar_dados_oracle(dados, connection):
    """ 
    Persiste os dados, contornando o erro de Duplica√ß√£o (ORA-00001).
    Possui a corre√ß√£o para o erro DPI-1010 no bloco finally.
    """
    cursor = connection.cursor()
    try:
        print("\n[INFO] Persistindo novos e antigos registros (Duplicatas ser√£o ignoradas)...")
        
        for registro in dados:
            # Converte a data para o formato correto
            data_colheita_str = str(registro['data_colheita']).split()[0]
            data_colheita_formatada = datetime.strptime(data_colheita_str, '%Y-%m-%d').strftime('%Y-%M-%D')
            
            # Remove chaves n√£o presentes na tabela COLHEITAS
            registro_db = {k: v for k, v in registro.items() if k not in ('motivo_perda_estimada', 'area_total_ha')}
            registro_db['data_colheita'] = data_colheita_formatada 
            
            try:
                sql_insert = f"""
                    INSERT INTO {TABELA_COLHEITAS} (id, talhao, maquina_id, produtividade_esperada_tha, 
                                                     perda_registrada_tha, data_colheita, preco_tonelada) 
                    VALUES (:id, :talhao, :maquina_id, :produtividade_esperada_tha, 
                            :perda_registrada_tha, TO_DATE(:data_colheita, 'YYYY-MM-DD'), :preco_tonelada)
                """
                # Corre√ß√£o: O formato de data no TO_DATE deve ser 'YYYY-MM-DD'
                sql_insert = sql_insert.replace("'YYYY-MM-DD'", "'YYYY-MM-DD'") 
                
                cursor.execute(sql_insert, registro_db)
                
            except cx_Oracle.IntegrityError as e:
                if e.args[0].code == 1:
                    continue # Ignora a duplicata
            except cx_Oracle.Error as e:
                print(f"   [ERRO SQL] Falha na inser√ß√£o do registro ID {registro['id']}: {e}")
                continue
        
        connection.commit()
        print("\n‚úÖ Persist√™ncia de dados finalizada no Oracle.")

    except cx_Oracle.Error as e:
        print(f"[ERRO] Falha ao salvar os dados no banco de dados: {e}")
        connection.rollback()
    finally:
        # ‚úÖ CORRE√á√ÉO DPI-1010: Verifica se o cursor existe antes de fechar
        if 'cursor' in locals() and cursor:
            try:
                cursor.close()
            except cx_Oracle.Error:
                pass # Ignora o erro se a conex√£o j√° estiver fechada/inv√°lida

def remover_colheita_oracle(id_remover, connection):
    """ Remove um registro de colheita do banco de dados Oracle. """
    cursor = connection.cursor()
    try:
        cursor.execute(f"DELETE FROM {TABELA_COLHEITAS} WHERE id = :id", {'id': id_remover})
        connection.commit()
        
        if cursor.rowcount > 0:
            print(f"\n‚úÖ Registro {id_remover} removido com sucesso do banco de dados.")
            return True
        else:
            print(f"\n‚ö†Ô∏è ID {id_remover} n√£o encontrado no banco de dados.")
            return False

    except cx_Oracle.Error as e:
        print(f"[ERRO] Falha ao remover o registro do banco de dados: {e}")
        connection.rollback()
        return False
    finally:
        # CORRE√á√ÉO DPI-1010: Verifica se o cursor existe antes de fechar
        if 'cursor' in locals() and cursor:
            try:
                cursor.close()
            except cx_Oracle.Error:
                pass # Ignora o erro se a conex√£o j√° estiver fechada/inv√°lida


# ====================================================================
# PROCEDIMENTO PRINCIPAL (FLUXO DO SISTEMA)
# ====================================================================

def menu_salvar_carregar(registros):
    """ Novo submenu para salvar e carregar dados em arquivo. """
    while True:
        print("\n--- OP√á√ïES DE ARQUIVO (TEXTO/JSON) ---")
        print("1. Salvar Dados em Arquivo de Texto")
        print("2. Carregar Dados de Arquivo de Texto (Substitui dados em mem√≥ria)")
        print("3. Salvar Dados em Arquivo JSON")
        print("4. Carregar Dados de Arquivo JSON (Substitui dados em mem√≥ria)")
        print("5. Retornar ao Menu Principal")
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == '1':
            salvar_em_arquivo_texto(registros)
        elif opcao == '2':
            novos_registros = carregar_de_arquivo_texto()
            if novos_registros is not None:
                # O retorno √© a lista de registros atualizada
                return novos_registros 
        elif opcao == '3':
            salvar_em_json(registros)
        elif opcao == '4':
            novos_registros = carregar_de_json()
            if novos_registros is not None:
                # O retorno √© a lista de registros atualizada
                return novos_registros
        elif opcao == '5':
            return registros # Retorna a lista atual sem altera√ß√£o
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

def menu_principal():
    """ Gerencia o loop principal do sistema. (ATUALIZADO) """
    global CULTURA_ATUAL, LIMITE_ALERTA_RISCO

    # 0. CONFIGURA√á√ÉO INICIAL (Fixo para Cana)
    CULTURA_ATUAL = "CANA-DE-A√á√öCAR"
    LIMITE_ALERTA_RISCO = 10.0 
    print(f"\n--- INICIANDO AGRO_ANALYTICS PARA CULTURA: {CULTURA_ATUAL} ---")

    # 1. Estabelece a conex√£o (Conex√£o com Banco de Dados)
    connection = conectar_oracle()
    
    # 2. Carrega os dados do banco (SELECT)
    registros = carregar_dados_oracle(connection)
    
    while True:
        print(f"\n\n--- AGRO_ANALYTICS: CULTURA: {CULTURA_ATUAL.upper()} ---")
        print("1. Cadastrar Novo Registro de Colheita (Com Planejamento Integrado)")
        print("2. Visualizar Relat√≥rio Anal√≠tico (Perdas)")
        print("3. Remover Registro de Colheita (DB e mem√≥ria)")
        print("4. Op√ß√µes de Arquivo (Salvar/Carregar TXT ou JSON)") # NOVO MENU
        print("5. Salvar Dados no Oracle (COMMIT) e Sair") 
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == '1':
            cadastrar_nova_colheita(registros)
        
        elif opcao == '2':
            exibir_relatorio_analitico(registros)
            
        elif opcao == '3':
            if not registros:
                print("\nüö´ Nenhum registro para remover.")
                continue

            try:
                print("\nIDs de Colheitas Atuais (em mem√≥ria):")
                for reg in registros:
                    print(f" - ID {reg.get('id', 'N/A')}: Talh√£o {reg.get('talhao', 'N/A')}")
                
                id_remover = int(input("\nInforme o ID do registro a ser removido: "))
                
                # Tenta remover do banco (DELETE)
                removido_do_db = remover_colheita_oracle(id_remover, connection)
                
                # Se removido do DB, atualiza a lista em mem√≥ria (Coer√™ncia)
                if removido_do_db:
                    registros = [reg for reg in registros if reg.get('id') != id_remover]
                
            except ValueError:
                print("‚ùå ERRO: O ID deve ser um n√∫mero inteiro.")
        
        elif opcao == '4':
            # CHAMA O NOVO SUBMENU
            registros_atualizados = menu_salvar_carregar(registros)
            if registros_atualizados is not None:
                registros = registros_atualizados # Atualiza a lista em mem√≥ria
        
        elif opcao == '5':
            # Salva no Oracle e sai
            salvar_dados_oracle(registros, connection) 
            connection.close()
            print("\nSistema encerrado. Sucesso na gest√£o Agrotech!")
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

# Ponto de entrada principal
if __name__ == "__main__":
    menu_principal()